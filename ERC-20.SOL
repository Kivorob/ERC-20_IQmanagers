pragma solidity ^0.5.0;


library SafeMath {

  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {
    if (a == 0) {
      return 0;
    }
    c = a * b;
    assert(c / a == b);
    return c;
  }

  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    // assert(b > 0); // Solidity automatically throws when dividing by 0
    // uint256 c = a / b;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold
    return a / b;
  }

  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }

  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {
    c = a + b;
    assert(c >= a);
    return c;
  }
}

contract Ownable {
  address public owner;

  constructor() public {
    owner = msg.sender;
  }

  modifier onlyOwner() {
    if (msg.sender == owner)
      _;
  }

  function transferOwnership(address newOwner) public onlyOwner {
    if (newOwner != address(0)) owner = newOwner;
  }
}


contract newToken is Ownable {

	using SafeMath for uint;

	string public constant name = "IQcoin";
	string public constant symbol = "IQC";
	uint8 public constant delicams = 18;

	uint public totalSupply;

	mapping (address => uint) balances;

	mapping (address => mapping (address => uint)) allowed;


	event Transfer (address indexed _from, address indexed _to, uint _value);
	event Approval (address indexed _from, address indexed _to, uint _value);
	


	function mint(address _to, uint _value) onlyOwner public {

		require (totalSupply + _value >= totalSupply && balances[_to] + _value >= balances[_to]);
		
		balances[_to] = balances[_to].add(_value);
		totalSupply = totalSupply.add(_value);		
	}

	function balanceOf(address _owner) public view returns(uint) {
		
		return balances[_owner];
	}

	function allowance (address _owner, address _spender) public view returns(uint) {
		return allowed[_owner][_spender];
	}
	

	function transfer(address _to, uint _value) public {

		require (balances[msg.sender] >= _value && balances[_to] + _value >= balances[_to]);
		balances[msg.sender] = balances[msg.sender].sub(_value);
		balances[_to] = balances[_to].add(_value);
		emit Transfer(msg.sender, _to, _value);
	}

	function transferFrom (address _from, address _to, uint _value) public {
		require (balances[_from] >= _value && balances[_to] + _value >= balances[_to] && allowed[_from][msg.sender] >= _value);
		balances[_from] = balances[_from].sub(_value);
		balances[_to] = balances[_to].add(_value);
		allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
		emit Transfer(_from, _to, _value);
	}
	
	function approve (address _spender, uint _value) public {
		allowed[msg.sender][_spender] = _value;
		emit Approval(msg.sender, _spender, _value);
	}
	
}

